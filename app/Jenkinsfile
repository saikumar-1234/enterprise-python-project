```groovy
// app/Jenkinsfile - CI/CD pipeline for Python application

pipeline {
    agent any
    environment {
        AWS_REGION = 'us-west-2'
        ECR_REGISTRY = '<your-account-id>.dkr.ecr.us-west-2.amazonaws.com'
        APP_NAME = 'python-app'
        IMAGE_TAG = "${env.BUILD_NUMBER}"
        SONARQUBE_SERVER = 'sonarqube'
    }
    stages {
        stage('Checkout') {
            steps {
                // Checkout application code from Git
                git branch: 'main', url: '<your-git-repo>'
            }
        }
        stage('SonarQube Analysis') {
            steps {
                // Run SonarQube analysis for code quality
                withSonarQubeEnv(SONARQUBE_SERVER) {
                    sh 'sonar-scanner -Dsonar.projectKey=python-app -Dsonar.sources=.'
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                // Build Docker image
                script {
                    dockerImage = docker.build("${ECR_REGISTRY}/${APP_NAME}:${IMAGE_TAG}")
                }
            }
        }
        stage('Trivy Scan') {
            steps {
                // Scan Docker image for vulnerabilities
                sh "trivy image --exit-code 1 --severity HIGH,CRITICAL ${ECR_REGISTRY}/${APP_NAME}:${IMAGE_TAG}"
            }
        }
        stage('Push to ECR') {
            steps {
                // Login to ECR and push image
                script {
                    sh "aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REGISTRY}"
                    dockerImage.push()
                }
            }
        }
        stage('Update Helm Chart') {
            steps {
                // Update image tag in values.yaml and push to Git
                script {
                    sh """
                    sed -i 's/tag: .*/tag: "${IMAGE_TAG}"/' helm-chart/values.yaml
                    git config user.email "jenkins@example.com"
                    git config user.name "Jenkins"
                    git add helm-chart/values.yaml
                    git commit -m "Update image tag to ${IMAGE_TAG}"
                    git push origin main
                    """
                }
            }
        }
    }
    post {
        always {
            // Clean up workspace
            cleanWs()
        }
    }
}